(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";var meta=require("@turf/meta");function bbox(e){var t=[1/0,1/0,-1/0,-1/0];return meta.coordEach(e,function(e){t[0]>e[0]&&(t[0]=e[0]),t[1]>e[1]&&(t[1]=e[1]),t[2]<e[0]&&(t[2]=e[0]),t[3]<e[1]&&(t[3]=e[1])}),t}module.exports=bbox,module.exports.default=bbox;

},{"@turf/meta":3}],2:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var earthRadius=6371008.8,factors={meters:earthRadius,metres:earthRadius,millimeters:1e3*earthRadius,millimetres:1e3*earthRadius,centimeters:100*earthRadius,centimetres:100*earthRadius,kilometers:earthRadius/1e3,kilometres:earthRadius/1e3,miles:earthRadius/1609.344,nauticalmiles:earthRadius/1852,inches:39.37*earthRadius,yards:earthRadius/1.0936,feet:3.28084*earthRadius,radians:1,degrees:earthRadius/111325},unitsFactors={meters:1,metres:1,millimeters:1e3,millimetres:1e3,centimeters:100,centimetres:100,kilometers:.001,kilometres:.001,miles:1/1609.344,nauticalmiles:1/1852,inches:39.37,yards:1/1.0936,feet:3.28084,radians:1/earthRadius,degrees:1/111325},areaFactors={meters:1,metres:1,millimeters:1e6,millimetres:1e6,centimeters:1e4,centimetres:1e4,kilometers:1e-6,kilometres:1e-6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function feature(r,e,t){if(!isObject(t=t||{}))throw new Error("options is invalid");var o=t.bbox,n=t.id;if(void 0===r)throw new Error("geometry is required");if(e&&e.constructor!==Object)throw new Error("properties must be an Object");o&&validateBBox(o),n&&validateId(n);var i={type:"Feature"};return n&&(i.id=n),o&&(i.bbox=o),i.properties=e||{},i.geometry=r,i}function geometry(r,e,t){if(!isObject(t=t||{}))throw new Error("options is invalid");var o,n=t.bbox;if(!r)throw new Error("type is required");if(!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");switch(n&&validateBBox(n),r){case"Point":o=point(e).geometry;break;case"LineString":o=lineString(e).geometry;break;case"Polygon":o=polygon(e).geometry;break;case"MultiPoint":o=multiPoint(e).geometry;break;case"MultiLineString":o=multiLineString(e).geometry;break;case"MultiPolygon":o=multiPolygon(e).geometry;break;default:throw new Error(r+" is invalid")}return n&&(o.bbox=n),o}function point(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");if(r.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(r[0])||!isNumber(r[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:r},e,t)}function points(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return point(r,e)}),t)}function polygon(r,e,t){if(!r)throw new Error("coordinates is required");for(var o=0;o<r.length;o++){var n=r[o];if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var i=0;i<n[n.length-1].length;i++){if(0===o&&0===i&&!isNumber(n[0][0])||!isNumber(n[0][1]))throw new Error("coordinates must contain numbers");if(n[n.length-1][i]!==n[0][i])throw new Error("First and last Position are not equivalent.")}}return feature({type:"Polygon",coordinates:r},e,t)}function polygons(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return polygon(r,e)}),t)}function lineString(r,e,t){if(!r)throw new Error("coordinates is required");if(r.length<2)throw new Error("coordinates must be an array of two or more positions");if(!isNumber(r[0][1])||!isNumber(r[0][1]))throw new Error("coordinates must contain numbers");return feature({type:"LineString",coordinates:r},e,t)}function lineStrings(r,e,t){if(!r)throw new Error("coordinates is required");if(!Array.isArray(r))throw new Error("coordinates must be an Array");return featureCollection(r.map(function(r){return lineString(r,e)}),t)}function featureCollection(r,e){if(!isObject(e=e||{}))throw new Error("options is invalid");var t=e.bbox,o=e.id;if(!r)throw new Error("No features passed");if(!Array.isArray(r))throw new Error("features must be an Array");t&&validateBBox(t),o&&validateId(o);var n={type:"FeatureCollection"};return o&&(n.id=o),t&&(n.bbox=t),n.features=r,n}function multiLineString(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiLineString",coordinates:r},e,t)}function multiPoint(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPoint",coordinates:r},e,t)}function multiPolygon(r,e,t){if(!r)throw new Error("coordinates is required");return feature({type:"MultiPolygon",coordinates:r},e,t)}function geometryCollection(r,e,t){if(!r)throw new Error("geometries is required");if(!Array.isArray(r))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:r},e,t)}function round(r,e){if(null==r||isNaN(r))throw new Error("num is required");if(e&&!(e>=0))throw new Error("precision must be a positive number");var t=Math.pow(10,e||0);return Math.round(r*t)/t}function radiansToLength(r,e){if(null==r)throw new Error("radians is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r*t}function lengthToRadians(r,e){if(null==r)throw new Error("distance is required");if(e&&"string"!=typeof e)throw new Error("units must be a string");var t=factors[e||"kilometers"];if(!t)throw new Error(e+" units is invalid");return r/t}function lengthToDegrees(r,e){return radiansToDegrees(lengthToRadians(r,e))}function bearingToAzimuth(r){if(null==r)throw new Error("bearing is required");var e=r%360;return e<0&&(e+=360),e}function radiansToDegrees(r){if(null==r)throw new Error("radians is required");return 180*(r%(2*Math.PI))/Math.PI}function degreesToRadians(r){if(null==r)throw new Error("degrees is required");return r%360*Math.PI/180}function convertLength(r,e,t){if(null==r)throw new Error("length is required");if(!(r>=0))throw new Error("length must be a positive number");return radiansToLength(lengthToRadians(r,e),t||"kilometers")}function convertArea(r,e,t){if(null==r)throw new Error("area is required");if(!(r>=0))throw new Error("area must be a positive number");var o=areaFactors[e||"meters"];if(!o)throw new Error("invalid original units");var n=areaFactors[t||"kilometers"];if(!n)throw new Error("invalid final units");return r/o*n}function isNumber(r){return!isNaN(r)&&null!==r&&!Array.isArray(r)}function isObject(r){return!!r&&r.constructor===Object}function validateBBox(r){if(!r)throw new Error("bbox is required");if(!Array.isArray(r))throw new Error("bbox must be an Array");if(4!==r.length&&6!==r.length)throw new Error("bbox must be an Array of 4 or 6 numbers");r.forEach(function(r){if(!isNumber(r))throw new Error("bbox must only contain numbers")})}function validateId(r){if(!r)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof r))throw new Error("id must be a number or a string")}function radians2degrees(){throw new Error("method has been renamed to `radiansToDegrees`")}function degrees2radians(){throw new Error("method has been renamed to `degreesToRadians`")}function distanceToDegrees(){throw new Error("method has been renamed to `lengthToDegrees`")}function distanceToRadians(){throw new Error("method has been renamed to `lengthToRadians`")}function radiansToDistance(){throw new Error("method has been renamed to `radiansToLength`")}function bearingToAngle(){throw new Error("method has been renamed to `bearingToAzimuth`")}function convertDistance(){throw new Error("method has been renamed to `convertLength`")}exports.earthRadius=earthRadius,exports.factors=factors,exports.unitsFactors=unitsFactors,exports.areaFactors=areaFactors,exports.feature=feature,exports.geometry=geometry,exports.point=point,exports.points=points,exports.polygon=polygon,exports.polygons=polygons,exports.lineString=lineString,exports.lineStrings=lineStrings,exports.featureCollection=featureCollection,exports.multiLineString=multiLineString,exports.multiPoint=multiPoint,exports.multiPolygon=multiPolygon,exports.geometryCollection=geometryCollection,exports.round=round,exports.radiansToLength=radiansToLength,exports.lengthToRadians=lengthToRadians,exports.lengthToDegrees=lengthToDegrees,exports.bearingToAzimuth=bearingToAzimuth,exports.radiansToDegrees=radiansToDegrees,exports.degreesToRadians=degreesToRadians,exports.convertLength=convertLength,exports.convertArea=convertArea,exports.isNumber=isNumber,exports.isObject=isObject,exports.validateBBox=validateBBox,exports.validateId=validateId,exports.radians2degrees=radians2degrees,exports.degrees2radians=degrees2radians,exports.distanceToDegrees=distanceToDegrees,exports.distanceToRadians=distanceToRadians,exports.radiansToDistance=radiansToDistance,exports.bearingToAngle=bearingToAngle,exports.convertDistance=convertDistance;

},{}],3:[function(require,module,exports){
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var helpers=require("@turf/helpers");function coordEach(e,t,r){if(null!==e)for(var n,o,i,a,l,u,c,s,g=0,f=0,h=e.type,p="FeatureCollection"===h,d="Feature"===h,y=p?e.features.length:1,m=0;m<y;m++){l=(s=!!(c=p?e.features[m].geometry:d?e.geometry:e)&&"GeometryCollection"===c.type)?c.geometries.length:1;for(var v=0;v<l;v++){var E=0,P=0;if(null!==(a=s?c.geometries[v]:c)){u=a.coordinates;var w=a.type;switch(g=!r||"Polygon"!==w&&"MultiPolygon"!==w?0:1,w){case null:break;case"Point":if(!1===t(u,f,m,E,P))return!1;f++,E++;break;case"LineString":case"MultiPoint":for(n=0;n<u.length;n++){if(!1===t(u[n],f,m,E,P))return!1;f++,"MultiPoint"===w&&E++}"LineString"===w&&E++;break;case"Polygon":case"MultiLineString":for(n=0;n<u.length;n++){for(o=0;o<u[n].length-g;o++){if(!1===t(u[n][o],f,m,E,P))return!1;f++}"MultiLineString"===w&&E++,"Polygon"===w&&P++}"Polygon"===w&&E++;break;case"MultiPolygon":for(n=0;n<u.length;n++){for("MultiPolygon"===w&&(P=0),o=0;o<u[n].length;o++){for(i=0;i<u[n][o].length-g;i++){if(!1===t(u[n][o][i],f,m,E,P))return!1;f++}P++}E++}break;case"GeometryCollection":for(n=0;n<a.geometries.length;n++)if(!1===coordEach(a.geometries[n],t,r))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}function coordReduce(e,t,r,n){var o=r;return coordEach(e,function(e,n,i,a,l){o=0===n&&void 0===r?e:t(o,e,n,i,a,l)},n),o}function propEach(e,t){var r;switch(e.type){case"FeatureCollection":for(r=0;r<e.features.length&&!1!==t(e.features[r].properties,r);r++);break;case"Feature":t(e.properties,0)}}function propReduce(e,t,r){var n=r;return propEach(e,function(e,o){n=0===o&&void 0===r?e:t(n,e,o)}),n}function featureEach(e,t){if("Feature"===e.type)t(e,0);else if("FeatureCollection"===e.type)for(var r=0;r<e.features.length&&!1!==t(e.features[r],r);r++);}function featureReduce(e,t,r){var n=r;return featureEach(e,function(e,o){n=0===o&&void 0===r?e:t(n,e,o)}),n}function coordAll(e){var t=[];return coordEach(e,function(e){t.push(e)}),t}function geomEach(e,t){var r,n,o,i,a,l,u,c,s,g,f=0,h="FeatureCollection"===e.type,p="Feature"===e.type,d=h?e.features.length:1;for(r=0;r<d;r++){for(l=h?e.features[r].geometry:p?e.geometry:e,c=h?e.features[r].properties:p?e.properties:{},s=h?e.features[r].bbox:p?e.bbox:void 0,g=h?e.features[r].id:p?e.id:void 0,a=(u=!!l&&"GeometryCollection"===l.type)?l.geometries.length:1,o=0;o<a;o++)if(null!==(i=u?l.geometries[o]:l))switch(i.type){case"Point":case"LineString":case"MultiPoint":case"Polygon":case"MultiLineString":case"MultiPolygon":if(!1===t(i,f,c,s,g))return!1;break;case"GeometryCollection":for(n=0;n<i.geometries.length;n++)if(!1===t(i.geometries[n],f,c,s,g))return!1;break;default:throw new Error("Unknown Geometry Type")}else if(!1===t(null,f,c,s,g))return!1;f++}}function geomReduce(e,t,r){var n=r;return geomEach(e,function(e,o,i,a,l){n=0===o&&void 0===r?e:t(n,e,o,i,a,l)}),n}function flattenEach(e,t){geomEach(e,function(e,r,n,o,i){var a,l=null===e?null:e.type;switch(l){case null:case"Point":case"LineString":case"Polygon":return!1!==t(helpers.feature(e,n,{bbox:o,id:i}),r,0)&&void 0}switch(l){case"MultiPoint":a="Point";break;case"MultiLineString":a="LineString";break;case"MultiPolygon":a="Polygon"}for(var u=0;u<e.coordinates.length;u++){var c={type:a,coordinates:e.coordinates[u]};if(!1===t(helpers.feature(c,n),r,u))return!1}})}function flattenReduce(e,t,r){var n=r;return flattenEach(e,function(e,o,i){n=0===o&&0===i&&void 0===r?e:t(n,e,o,i)}),n}function segmentEach(e,t){flattenEach(e,function(e,r,n){var o=0;if(e.geometry){var i,a=e.geometry.type;if("Point"!==a&&"MultiPoint"!==a)return!1!==coordEach(e,function(a,l,u,c,s){if(void 0!==i){var g=helpers.lineString([i,a],e.properties);if(!1===t(g,r,n,s,o))return!1;o++,i=a}else i=a})&&void 0}})}function segmentReduce(e,t,r){var n=r,o=!1;return segmentEach(e,function(e,i,a,l,u){n=!1===o&&void 0===r?e:t(n,e,i,a,l,u),o=!0}),n}function lineEach(e,t){if(!e)throw new Error("geojson is required");flattenEach(e,function(e,r,n){if(null!==e.geometry){var o=e.geometry.type,i=e.geometry.coordinates;switch(o){case"LineString":if(!1===t(e,r,n,0,0))return!1;break;case"Polygon":for(var a=0;a<i.length;a++)if(!1===t(helpers.lineString(i[a],e.properties),r,n,a))return!1}}})}function lineReduce(e,t,r){var n=r;return lineEach(e,function(e,o,i,a){n=0===o&&void 0===r?e:t(n,e,o,i,a)}),n}function findSegment(e,t){if(t=t||{},!helpers.isObject(t))throw new Error("options is invalid");var r,n=t.featureIndex||0,o=t.multiFeatureIndex||0,i=t.geometryIndex||0,a=t.segmentIndex||0,l=t.properties;switch(e.type){case"FeatureCollection":n<0&&(n=e.features.length+n),l=l||e.features[n].properties,r=e.features[n].geometry;break;case"Feature":l=l||e.properties,r=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":r=e;break;default:throw new Error("geojson is invalid")}if(null===r)return null;var u=r.coordinates;switch(r.type){case"Point":case"MultiPoint":return null;case"LineString":return a<0&&(a=u.length+a-1),helpers.lineString([u[a],u[a+1]],l,t);case"Polygon":return i<0&&(i=u.length+i),a<0&&(a=u[i].length+a-1),helpers.lineString([u[i][a],u[i][a+1]],l,t);case"MultiLineString":return o<0&&(o=u.length+o),a<0&&(a=u[o].length+a-1),helpers.lineString([u[o][a],u[o][a+1]],l,t);case"MultiPolygon":return o<0&&(o=u.length+o),i<0&&(i=u[o].length+i),a<0&&(a=u[o][i].length-a-1),helpers.lineString([u[o][i][a],u[o][i][a+1]],l,t)}throw new Error("geojson is invalid")}function findPoint(e,t){if(t=t||{},!helpers.isObject(t))throw new Error("options is invalid");var r,n=t.featureIndex||0,o=t.multiFeatureIndex||0,i=t.geometryIndex||0,a=t.coordIndex||0,l=t.properties;switch(e.type){case"FeatureCollection":n<0&&(n=e.features.length+n),l=l||e.features[n].properties,r=e.features[n].geometry;break;case"Feature":l=l||e.properties,r=e.geometry;break;case"Point":case"MultiPoint":return null;case"LineString":case"Polygon":case"MultiLineString":case"MultiPolygon":r=e;break;default:throw new Error("geojson is invalid")}if(null===r)return null;var u=r.coordinates;switch(r.type){case"Point":return helpers.point(u,l,t);case"MultiPoint":return o<0&&(o=u.length+o),helpers.point(u[o],l,t);case"LineString":return a<0&&(a=u.length+a),helpers.point(u[a],l,t);case"Polygon":return i<0&&(i=u.length+i),a<0&&(a=u[i].length+a),helpers.point(u[i][a],l,t);case"MultiLineString":return o<0&&(o=u.length+o),a<0&&(a=u[o].length+a),helpers.point(u[o][a],l,t);case"MultiPolygon":return o<0&&(o=u.length+o),i<0&&(i=u[o].length+i),a<0&&(a=u[o][i].length-a),helpers.point(u[o][i][a],l,t)}throw new Error("geojson is invalid")}exports.coordEach=coordEach,exports.coordReduce=coordReduce,exports.propEach=propEach,exports.propReduce=propReduce,exports.featureEach=featureEach,exports.featureReduce=featureReduce,exports.coordAll=coordAll,exports.geomEach=geomEach,exports.geomReduce=geomReduce,exports.flattenEach=flattenEach,exports.flattenReduce=flattenReduce,exports.segmentEach=segmentEach,exports.segmentReduce=segmentReduce,exports.lineEach=lineEach,exports.lineReduce=lineReduce,exports.findSegment=findSegment,exports.findPoint=findPoint;

},{"@turf/helpers":2}],4:[function(require,module,exports){
module.exports={bbox:require("@turf/bbox")};

},{"@turf/bbox":1}]},{},[4])(4)
});
